R = np.zeros((2,3))

R[0, 0] = 0.15
R[0, 1] = 0.0
R[0, 2] = 0.05

R[1, 0] = 0.08
R[1, 1] = 0.15
R[1, 2] = 0.0

# defining the diff eqs...
@nb.jit('float64[:](float64[:], float64, float64, float64, float64)', nopython = True)
def ode_sys(y, I_syn, I_noise, I_ext, g_Ks):

    dydt = np.empty(4)

    dydt[0] = (math.pow(1 + math.exp((y[3] + 53) / 7), -1) - y[0]) / (0.37 + 2.78 * math.pow(1 + math.exp((y[3] + 40.5) / 6), -1))
    dydt[1] = (math.pow(1 + math.exp((-y[3] - 30) / 10), -1) - y[1]) / (0.37 + 1.85 * math.pow(1 + math.exp((y[3] + 27) / 15), -1))
    dydt[2] = (math.pow(1 + math.exp((-y[3] - 39) / 5), -1) - y[2]) / 75
    # dVdt = (1/C_m) * ( - I_Na - I_K - I_Ks - I_leak + I_ext - I_syn  +  I_noise)
    dydt[3] = dydt[3] = (1 / C_m) * (- g_Na * math.pow(1 + math.exp((-y[3] - 30) / 9.5), -1) ** 3 * y[0] * (y[3] - V_Na) - g_K * y[1] ** 4 * (y[3] - V_k) - g_Ks * y[2] * (y[3] - V_k) - g_L * (y[3] - V_L) + I_ext - I_syn + I_noise)

    return dydt

@nb.jit('float64(int64, float64[:,:], int64, float64)', nopython = True)
def I_syn_calc(i, t_events, n, y):

    current_inh = 0
    current_exc = 0

    for j in range(N):
        if A[j, i] == 1:
            # Condition to filter elements
            condition = (t_events[j] != 0)
            train_j = t_events[j][condition]

            try:
                if j < n_exc:
                    add_exc = (w_exc_exc if i < n_exc else w_exc_inh) * (y - v_exc) * (R[0, 0] if i < n_exc else R[1, 0]) * math.exp(-(n - train_j[-1]) * h / tau_f)
                    current_exc += add_exc
                else:
                    add_inh = (w_inh_exc if i < n_exc else w_inh_inh) * (y - v_inh) * (((R[0, 1] if i < n_exc else R[1, 1]) * math.exp(-(n - train_j[-1]) * h / tau_f)) + ((R[0, 2] if i < n_exc else R[1, 2]) * math.exp(-(n -train_j[-1]) * h / tau_s)))
                    current_inh += add_inh
            except:
                continue
        else:
            continue
    return (current_exc + current_inh)


@nb.jit('float64[:,:]()', nopython = True)
def solve_RK4():

    y = np.zeros((N,4))
    t_events = np.zeros((N,1))

    k1 = np.zeros(4)
    k2 = np.zeros(4)
    k3 = np.zeros(4)

    # variable 8: initial conditions of neurons
    for i in range(N):
        y[i,0] = np.round(random.uniform(0.45, 0.9), 2)  # h0
        y[i,1] = np.round(random.uniform(0.3, 0.6), 2)  # n0
        y[i,2] = np.round(random.uniform(0.03, 0.07), 2)  # z0
        y[i,3] = np.round(random.uniform(-65, -80), 2)  # V0

    for n in range(n_steps - 1):
        for i in range(N):

            if n < int(t_syn / h):
                I_syn = np.zeros(4)
            else:
                I_syn = np.zeros(4)
                I_syn[0] = I_syn_calc(i, t_events, n, y[i, 3])
                I_syn[1] = I_syn_calc(i, t_events, n + 0.5, np.add(y[i, 3], np.divide(k1[3], 2)))
                I_syn[2] = I_syn_calc(i, t_events, n + 0.5, np.add(y[i, 3], np.divide(k2[3], 2)))
                I_syn[3] = I_syn_calc(i, t_events, n + 1, np.add(y[i, 3], k3[3]))


            if i == 0:
                I_ext = I_it
                g_Ks = g_Ks_exc
            elif 0 < i < n_exc:
                I_ext = I_exc
                g_Ks = g_Ks_exc
            else:
                I_ext = I_inh
                g_Ks = g_Ks_inh

            k1 = h * ode_sys(y[i], I_syn[0], I_noise_arr[i, n], I_ext, g_Ks)
            k2 = h * ode_sys(np.add(y[i], np.divide(k1, 2)), I_syn[1], I_noise_arr[i, n], I_ext, g_Ks)
            k3 = h * ode_sys(np.add(y[i], np.divide(k2, 2)), I_syn[2], I_noise_arr[i, n], I_ext, g_Ks)
            k4 = h * ode_sys(np.add(y[i], k3), I_syn[3], I_noise_arr[i, n], I_ext, g_Ks)

            old = y[i]
            new = np.add(y[i], (np.add(k1, np.add(2 * k2, np.add(2 * k3, k4))) / 6))

            # variable 7: threshold of spike recording
            if old[3] < 5 and new[3] > 5:
                
                a = np.zeros(N)
                a[i] = n
                t_events = np.column_stack((t_events, a))

            y[i] = new
    return h * t_events
