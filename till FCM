import copy

import matplotlib.pyplot as plt
import numpy as np
import math
import multiprocessing as mp
import networkx as nx
import random

#NetworkStructure
#create the set of neurons and then feed them into a graph
# variable 1: input current
I_exc = -0.2
I_inh = -0.2
I_it = 1

# variable 5: Acetylcholine concentration
g_Ks_exc = 0
g_Ks_inh = 0.375

# Define the number of neurons
N = 44

# Define the number of excitatory neurons
n_exc = 40

# Define the number of inhibitory neurons
n_inh = 4

# Create an empty graph object
G = nx.DiGraph()

# Add nodes to the graph
for i in range(N):
    # Add an excitatory neuron
    if 0 < i < int(n_exc):
        G.add_node(i, type='excitatory', I_ext=I_exc, g_Ks=g_Ks_exc)
    elif i == 0:
        G.add_node(i, type='excitatory', I_ext=I_it, g_Ks=g_Ks_exc)
    else:
        # Add an inhibitory neuron
        G.add_node(i, type='inhibitory', I_ext=I_inh, g_Ks=g_Ks_inh)

# variable 2: connectivity structure type of network

# variable 3: percentage of inhibition and disinhibition
'''
# Define the percentage of excitatory neurons that project to excitatory neurons
p_exc_to_exc = 0.1
'''
# Define the percentage of inhibitory neurons that project to excitatory neurons
p_inh_to_exc = 0.5
'''
# Define the percentage of excitatory neurons that project to inhibitory neurons
p_exc_to_inh = 0.2
'''
# Define the percentage of inhibitory neurons that project to inhibitory neurons
p_inh_to_inh = 0.5

# Assign edges to the network
inhibitory_neurons = [j for j in G.nodes if G.nodes[j]['type'] == 'inhibitory']
excitatory_neurons = [j for j in G.nodes if G.nodes[j]['type'] == 'excitatory']

for i in G.nodes:
    # variable 4: percentage of excitation, currently set to two connections
    if G.nodes[i]['type'] == 'excitatory':

        # Select a random subset of excitatory neurons to project to
        #proj_exc_exc_neurons = random.sample(excitatory_neurons, round(len(excitatory_neurons) * p_exc_to_exc))
        proj_exc_exc_neurons = random.sample(excitatory_neurons, 2)
        #print(len(proj_exc_exc_neurons))
        # Select a random subset of inhibitory neurons to project to
        #proj_exc_inh_neurons = random.sample(inhibitory_neurons, round(len(inhibitory_neurons) * p_exc_to_inh))
        proj_exc_inh_neurons = random.sample(inhibitory_neurons, 2)
        #print(len(proj_exc_inh_neurons))

        # Add edges from the excitatory neuron to the selected inhibitory neurons
        for j in proj_exc_inh_neurons:
            G.add_edge(i, j)
        # Add edges from the excitatory neuron to the selected excitatory neurons
        for j in proj_exc_exc_neurons:
            if i != j:
                G.add_edge(i, j)

    elif G.nodes[i]['type'] == 'inhibitory':

        # Select a random subset of excitatory neurons to project to
        proj_inh_exc_neurons = random.sample(excitatory_neurons, round(len(excitatory_neurons) * p_inh_to_exc))
        #print(len(proj_inh_exc_neurons))
        # Select a random subset of inhibitory neurons to project to
        proj_inh_inh_neurons = random.sample(inhibitory_neurons, round(len(inhibitory_neurons) * p_inh_to_inh))
        #print(len(proj_inh_inh_neurons))

        # Add edges from the inhibitory neuron to the selected inhibitory neurons
        for j in proj_inh_inh_neurons:
            if i != j:
                G.add_edge(i, j)
        # Add edges from the inhibitory neuron to the selected excitatory neurons
        for j in proj_inh_exc_neurons:
            G.add_edge(i, j)

# Adjacency matrix
A = nx.to_numpy_array(G)

#ModelParameters
# Time parameters
h = 0.05  # Time step (ms), anywhere up until 0.01 gives stability for the spike of a single neuron
t0 = 0
T = 1500
n_steps = int(T / h)

# Model Parameters
v_exc = 0
v_inh = -75

C_m = 1
g_K = 3
g_Na = 24
g_L = 0.02

V_k = -90
V_Na = 55
V_L = -60

tau_f = 0.5
tau_s = 50

A_plus = 0.07
A_minus = 0.025

tau_plus = 14
tau_minus = 34

# variable 6: synaptic weights
# wij, that of excitatory is determined within the integration in case STDP was to be implemented
w_inh = 1  # inhibitory neurons
w_exc_array = [5]
w_exc = [np.zeros(N) for i in range(N)]

#AnalysisFunctions


#prep(sol[k])
def prep(sol_k):
    copi = copy.deepcopy(sol_k[1])
    for i in range(1500):
        for i in range(len(copi)):
            for j in range(len(copi[i])):
                if copi[i][j] <= 2000:
                    copi[i].pop(j)
                    #print(len(gks_copy[k][i]))
                    break

    for i in range(len(copi)):
        for j in range(len(copi[i])):
            copi[i][j] = copi[i][j] / 20
    return copi


# diff(prep(sol_k))
def diff(sol_k):
    #print(sol_k)
    diff = [[] for i in range(len(sol_k))]
    for i in range(len(sol_k)):
        #print(i)
        try:
            diff[i].append(sol_k[i][0])
        except:
            continue
        for j in range(len(sol_k[i])):
            if j == len(sol_k[i]) - 1:
                diff[i].append(T - sol_k[i][-1])
            else:
                diff[i].append(sol_k[i][j + 1] - sol_k[i][j])
    return diff


def cubed(my_list):
    return [x ** 3 for x in my_list]


def squared(my_list):
    #print(my_list)
    return [x ** 2 for x in my_list]


#fcm_exc(prep(sol[k]))
def fcm(prepy):
    prep = prepy[0:n_exc]
    #print(prep)
    amd = np.zeros((len(prep), len(prep)))
    fcm = np.zeros((len(prep), len(prep)))
    fcm_binary = np.zeros((len(prep), len(prep)))
    muo = np.zeros(len(prep))
    segma = np.zeros(len(prep))
    #print(prep)
    #one = 0

    for i in range(0, len(prep)):
        #print(i)

        if len(prep[i]) < 5:
            for j in range(0, len(prep)):
                fcm[i][j] = 0
        else:
            for j in range(0, len(prep)):
                if len(prep[j]) < 5 or i == j:
                    fcm[i][j] = 0
                else:
                    muo[j] = np.array(squared(diff(prep)[j])).sum() / (2 * T)
                    #print(muo[j]**2)
                    #print(np.array(diff_3[j]).sum()/(12*T))
                    try:
                        segma[j] = (((np.array(cubed(diff(prep)[j])).sum()) / (3 * T)) - (muo[j] ** 2)) ** 0.5
                    except:
                        print(j)
                        print("math domain error")
                        continue
                    try:
                        amd[i][j] = (1 / len(prep[i])) * np.array([min(np.array(
                            [(prep[j][l] - prep[i][k]) for l in range(len(prep[j])) if (prep[j][l] - prep[i][k]) > 0]))
                            for k in range(len(prep[i]))]).sum()
                        fcm[i][j] = math.sqrt(len(prep[i])) * (- amd[i][j] + muo[j]) / segma[j]
                    except:
                        #print("min empty")
                        fcm[i][j] = 0

                    if fcm[i][j] >= 2:
                        fcm_binary[i][j] = 1
    return fcm, fcm_binary


#Run Functions
# Integration array
dydt = np.zeros(4)
k1 = np.zeros(4)
k2 = np.zeros(4)
k3 = np.zeros(4)
k4 = np.zeros(4)


# order of setting model parameters: BB, LE, Inhibitory
# Relative Synaptic Efficacy

# lifting the discrimination between populations of excitatory neurons
def M(post, pre):
    return 1


# excitatory, and fast and slow inhibitory discrimination
def R(post, index):
    if post < n_exc:
        if index == 0:
            return 0.15
        elif index == 1:
            return 0
        else:
            return 0.05

    else:
        if index == 0:
            return 0.08
        elif index == 1:
            return 0.15
        else:
            return 0


I_noise_arr = np.zeros((N, n_steps))


def I_noise_fill(I_noise_arr):
    for i in range(N):
        for n in range(n_steps):
            if I_noise_arr[i][n] == 0:

                # Generate a random number between 0 and 1
                rand_num = random.random()

                # Check if the neuron receives input
                if rand_num < 0.0002:

                    for j in range(n, (n + int(1 / h)) % n_steps):
                        I_noise_arr[i][j] = 80.0


I_noise_fill(I_noise_arr)


# defining the diff eqs.
def ode_sys(y, I_syn, I_noise, I_ext, g_Ks):
    #print(I_noise_arr[i][n])
    dydt[0] = (math.pow(1 + math.exp((y[3] + 53) / 7), -1) - y[0]) / (
                0.37 + 2.78 * math.pow(1 + math.exp((y[3] + 40.5) / 6), -1))
    dydt[1] = (math.pow(1 + math.exp((-y[3] - 30) / 10), -1) - y[1]) / (
                0.37 + 1.85 * math.pow(1 + math.exp((y[3] + 27) / 15), -1))
    dydt[2] = (math.pow(1 + math.exp((-y[3] - 39) / 5), -1) - y[2]) / 75
    # dVdt = (1/C_m) * ( - I_Na - I_K - I_Ks - I_leak + I_ext - I_syn  +  I_noise)
    dydt[3] = (1 / C_m) * (- g_Na * math.pow(1 + math.exp((-y[3] - 30) / 9.5), -1) ** 3 * y[0] * (y[3] - V_Na) - g_K
                           * y[1] ** 4 * (y[3] - V_k) - g_Ks * y[2] * (y[3] - V_k) - g_L * (
                                       y[3] - V_L) + I_ext - I_syn + I_noise)
    return dydt


def I_syn_calc(i, t_events, n, y):
    current = 0
    for j in range(N):
        if A[j][i] == 1:
            if G.nodes[j]['type'] == 'excitatory':

                current += np.array([M(i, j) * w_exc[i][j] * (y - v_exc) *
                                     R(i, 0) * math.exp(-(n - t_events[j][k]) * h / tau_f) for k in
                                     range(len(t_events[j]))]).sum()

            else:

                current += np.array([M(i, j) * w_inh * (y - v_inh) *
                                     (R(i, 1) * math.exp(-(n - t_events[j][k]) * h / tau_f) + R(i, 2) * math.exp(
                                         -(n - t_events[j][k]) * h / tau_s)) for k in range(len(t_events[j]))]).sum()

    return current


#t_out = [[] for i in range(N)]
# passes the y values of every neuron separately to ode_sys
def solve_RK4(ode_sys):
    y = [[] for i in range(N)]
    # variable 8: initial conditions of neurons
    for i in range(N):
        y[i] = [np.round(random.uniform(0.45, 0.9), 2), np.round(random.uniform(0.3, 0.6), 2),
                np.round(random.uniform(0.03, 0.07), 2), np.round(random.uniform(-65, -80), 2)]

    t_events = [[] for i in range(N)]

    for n in range(n_steps - 1):

        #if n % 1000 == 0:
        #    print(n)
        for i in range(N):

            if n < int(100 / h):
                I_syn = np.zeros(4)

            else:

                I_syn = np.zeros(4)
                I_syn[0] = I_syn_calc(i, t_events, n, y[i][4 * n + 3])
                I_syn[1] = I_syn_calc(i, t_events, n + 0.5, np.add(y[i][4 * n + 3], np.divide(k1[3], 2)))
                I_syn[2] = I_syn_calc(i, t_events, n + 0.5, np.add(y[i][4 * n + 3], np.divide(k2[3], 2)))
                I_syn[3] = I_syn_calc(i, t_events, n + 1, np.add(y[i][4 * n + 3], k3[3]))

            k1[0], k1[1], k1[2], k1[3] = h * ode_sys(y[i][4 * n:4 * n + 4], I_syn[0], I_noise_arr[i][n],
                                                     G.nodes[i]['I_ext'], G.nodes[i]['g_Ks'])
            k2[0], k2[1], k2[2], k2[3] = h * ode_sys(np.add(y[i][4 * n:4 * n + 4], np.divide(k1, 2)), I_syn[1],
                                                     I_noise_arr[i][n], G.nodes[i]['I_ext'], G.nodes[i]['g_Ks'])
            k3[0], k3[1], k3[2], k3[3] = h * ode_sys(np.add(y[i][4 * n:4 * n + 4], np.divide(k2, 2)), I_syn[2],
                                                     I_noise_arr[i][n], G.nodes[i]['I_ext'], G.nodes[i]['g_Ks'])
            k4[0], k4[1], k4[2], k4[3] = h * ode_sys(np.add(y[i][4 * n:4 * n + 4], k3), I_syn[3], I_noise_arr[i][n + 1],
                                                     G.nodes[i]['I_ext'], G.nodes[i]['g_Ks'])

            update = np.add(y[i][4 * n:4 * n + 4], (np.add(k1, np.add(2 * k2, np.add(2 * k3, k4))) / 6))
            y[i] = np.concatenate((y[i], update))

            # variable 7: threshold of spike recording
            if y[i][4 * (n - 1) + 3] < 5 and y[i][4 * n + 3] > 5:
                t_events[i].append(n)

    return y, t_events

#%%
#Run

sol_wexc = [[] for i in range(len(w_exc_array))]

for k in range(len(w_exc_array)):
    for i in range(N):
        for j in range(N):
            w_exc[i][j] = w_exc_array[k]
    sol_wexc[k] = solve_RK4(ode_sys)
    plt.title('w_exc = %f, g_Ks = 1.5, w_inh = 1' % round(w_exc_array[k], 1))
    plt.eventplot(prep(sol_wexc[k])[0:n_exc])
    plt.show()

#%%
#Get re-activated paths
A_exc = np.zeros((n_exc, n_exc))
#print(w_exc_array)
for i in range(n_exc):
    for j in range(n_exc):
        A_exc[i][j] = A[i][j]

#exc

fcm_wexc = [[] for i in range(len(w_exc_array))]

for k in range(len(w_exc_array)):
    fcm_wexc[k] = fcm(prep(sol_wexc[k][0:n_exc]))

    conn = []
    ed = []
    for i in range(n_exc):
        for j in range(n_exc):
            if fcm_wexc[k][1][i][j] == 1 and A_exc[i][j] == 1:
                if (i, j) not in ed:
                    ed.append((i, j))
                if i not in conn:
                    conn.append(i)
                if j not in conn:
                    conn.append(j)

    G = nx.from_numpy_array(A_exc, create_using=nx.DiGraph)
    nodes = list(G.nodes())
    edges = list(G.edges())
    pos = nx.spring_layout(G)
    '''
    for i in conn:
        if i in nodes:
            nodes.remove(i)
    for i in ed:
        if i in edges:
            edges.remove(i)
    '''
    phantom = []
    phan = []
    for i in range(n_exc):
        for j in range(n_exc):
            if fcm_wexc[k][1][i][j] == 1 and A[i][j] == 0:
                if (i, j) not in phantom:
                    phantom.append((i, j))
                if i not in phan:
                    phan.append(i)
                if j not in phan:
                    phan.append(j)

    stim = [0]
    plt.title('w_exc = %f, g_Ks = 0, w_inh = 0.5' % round(w_exc_array[k], 1))
    nx.draw_networkx_nodes(G, pos, nodelist=phan, node_color="tab:purple")
    nx.draw_networkx_nodes(G, pos, nodelist=conn, node_color="tab:red")
    nx.draw_networkx_nodes(G, pos, nodelist=stim, node_color="tab:green")
    #nx.draw_networkx_edges(G, pos, edgelist=edges, edge_color="tab:blue")
    nx.draw_networkx_edges(G, pos, edgelist=phantom, edge_color="tab:purple")
    nx.draw_networkx_edges(G, pos, edgelist=ed, edge_color="tab:red")
    nx.draw_networkx_labels(G, pos)
    plt.show()

    # getting paths and their lengths
    G_ret = nx.DiGraph()
    for i in conn:
        G_ret.add_node(i)
    for i in ed:
        G_ret.add_edge(i[0], i[1])

    # print path length
    paths = []
    for i in G_ret.nodes():
        try:
            for path in nx.all_simple_paths(G_ret, 0, i):
                paths.append(path)
        except:
            paths.append([])
            continue
    try:
        path_len = np.max([(len(path) - 1) for path in paths])
    except:
        path_len = 0

    print('recovered paths starting from source: ' + str(paths))
    print('longest path recovered starting from source: %f' % path_len)
    try:
        print('ghost/all paths %: ' + str(round((len(phantom) * 100) / (len(ed) + len(phantom)), 2)))
        print('real/all paths %: ' + str(round((len(ed) * 100) / (len(ed) + len(phantom)), 2)))
    except:
        continue
